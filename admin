#!/bin/bash
#
# Copyright (c) 2022 by Thomas A. Early N7TAE
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

trap ControlC INT

ControlC () {
	echo "caught SIGINT"
}

InstallSystem () {
	local n
	if [ -z ${1} ]; then
		n=$( grep '^processor' /proc/cpuinfo | wc -l )
		echo "Detected $n processors for make"
		make -j$n
	fi
	sudo make ${1}install
}

BaseStatus () {
	local LoadGate SubGate LoadLink SubLink LoadRelay SubRelay LoadDTMF SubDTMF
	LoadGate=$( systemctl show -p LoadState --value qngateway )
	SubGate=$( systemctl show -p SubState --value qngateway )
	LoadLink=$( systemctl show -p LoadState --value qnlink )
	SubLink=$( systemctl show -p SubState --value qnlink )
	LoadRelay=$( systemctl show -p LoadState --value qnistack )
	SubRelay=$( systemctl show -p SubState --value qnistack )
	LoadDTMF=$( systemctl show -p LoadState --value qndtmf )
	SubDTMF=$( systemctl show -p SubState --value qndtmf )
	if [[ $LoadGate == 'loaded' ]]; then
		if [[ $SubGate == 'running' ]]; then
			GateState='running'
		else
			GateState='stopped'
		fi
	else
		GateState='not installed'
	fi
	echo "QetGateway is $GateState"
	if [[ $LoadLink == 'loaded' ]]; then
		if [[ $SubLink == 'running' ]]; then
			LinkState='running'
		else
			LinkState='stopped'
		fi
	else
		LinkState='not installed'
	fi
	echo "QetLink is $LinkState"
	if [[ $LoadRelay == 'loaded' ]]; then
		if [[ $SubRelay == 'running' ]]; then
			RelayState='running'
		else
			RelayState='stopped'
		fi
	else
		RelayState='not installed'
	fi
	echo "QetRelay is $LinkState"
	if [[ $LoadDTMF == 'loaded' ]]; then
		if [[ $SubDTMF == 'running' ]]; then
			DTMFState='running'
		else
			DTMFState='stopped'
		fi
	else
		DTMFState='not installed'
	fi
	echo "DTMF is $DTMFState"
}

Header () {
	local count
	count=$( ps -aux | grep -e qn | wc -l )
	if [ ${count} -gt 3 ]; then
		echo
		echo "USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND"
		ps -aux | grep -e qngateway -e qnlink -e qnistack -e qndtmf | grep -v -e journal -e grep
	fi
	echo
}

LogMenu () {
	ans=''
	while [[ "$ans" != q* ]]; do
		clear
		echo "            Log Menu"
		Header
		echo "After starting a log, use <Ctrl>+C to stop the log and return to this menu."
		echo
		if [[ $GateState == 'running' ]]; then
			echo " g  : qngateway Log"
		else
			echo "      qngateway is not running"
		fi
		if [[ $LinkState == 'running' ]]; then
			echo " l  : qnlink Log"
		else
			echo "      qnlink is not running"
		fi
		if [[ $RelayState == 'running' ]]; then
			echo " r  : qnistack Log"
		else
			echo "      qnistack is not running"
		fi
		if [[ $DTMFState == 'running' ]]; then
			echo " d  : qndtmf Log"
		else
			echo "      qndtmf is not running"
		fi
		echo
		echo " q  : quit and return to main menu"
		echo
		read -p "Command: " ans

		if [[ "$ans" == g* ]] && [[ "$GateState" == 'running' ]]; then
			sudo journalctl -u qngateway -f
		elif [[ "$ans" == l* ]] && [[ "$LinkState" == 'running' ]]; then
			sudo journalctl -u qnlink -f
		elif [[ "$ans" == r* ]] && [[ "$RelayState" == 'running' ]]; then
			sudo journalctl -u qnistack -f
		elif [[ "$ans" == d* ]] && [[ "$DTMFState" == 'running' ]]; then
			sudo journalctl -u qndtmf -f
		fi
	done
	ans=''
}

MaintenanceMenu () {
	local m n
	ans=''
	while [[ "$ans" != q* ]]; do
		clear
		echo "            MaintenanceMenu"
		Header
		if [[ "$GateState" == 'running' ]]; then
			echo " g : Stop  qngateway"
		elif [[ "$GateState" == 'stopped' ]]; then
			echo " g : Start qngateway"
		fi
		if [[ "$LinkState" == 'running' ]]; then
			echo " l : Stop  qnlink"
		elif [[ "$LinkState" == 'stopped' ]]; then
			echo " l : Start qnlink"
		fi
		if [[ "$RelayState" == 'running' ]]; then
			echo " r : Stop  qnistack"
		elif [[ "$RelayState" == 'stopped' ]]; then
			echo " r : Start qnistack"
		fi
		if [[ "$DTMFState" == 'running' ]]; then
			echo " d : Stop  qndtmf"
		elif [[ "$DTMFState" == 'stopped' ]]; then
			echo " d : Start qndtmf"
		fi
		echo
		echo " q : Return to main Menu"
		echo
		read -p "Command: " ans

		if   [[ "$ans" == g* ]]; then
			if [[ "$GateState" == 'running' ]]; then
				sudo systemctl stop qngateway
			elif [[ "$GateState" == 'stopped' ]]; then
				sudo systemctl start qngateway
			fi
			BaseStatus
		elif [[ "$ans" == l* ]]; then
			if [[ "$LinkState" == 'running' ]]; then
				sudo systemctl stop qnlink
			elif [[ "$LinkState" == 'stopped' ]]; then
				sudo systemctl start qnlink
			fi
			BaseStatus
		elif [[ "$ans" == r* ]]; then
			if [[ "$RelayState" == 'running' ]]; then
				sudo systemctl stop qnistack
			elif [[ "$RelayState" == 'stopped' ]]; then
				sudo systemctl start qnistack
			fi
			BaseStatus
		elif [[ "$ans" == d* ]]; then
			if [[ "$DTMFState" == 'running' ]]; then
				sudo systemctl stop qndtmf
			elif [[ "$DTMFState" == 'stopped' ]]; then
				sudo systemctl start qndtmf
			fi
			BaseStatus
		fi
	done
	ans=''
}

GatewayMenu () {
	ans=''
	while [[ "$ans" != q* ]]; do
		local refcount=$( grep -s "^REF" gwys.txt | wc -l )
		local dcscount=$( grep -s "^DCS" gwys.txt | wc -l )
		local xrfcount=$( grep -s "^XRF" gwys.txt | wc -l )
		local xlxcount=$( grep -s "^XLX" gwys.txt | wc -l )
		local repcount=$( grep -s -v "^#" gwys.txt | grep -s -v -e "^REF" -e "^DCS" -e "^XRF" -e "^XLX" | wc -l )
		clear
		echo
		echo "            Gateway File"
		echo
		echo "     $refcount REF, $dcscount DCS, $xrfcount XRF, $xlxcount XLX and $repcount Repeaters"
		echo
		echo "     All initialization will overwrite any existing file!"
		echo "i6 : Initialize gwys.txt using www.PiStar.uk, xlxapi.rlx.lu and IPv6 from QuadNet"
		echo "ip : Initialize gwys.txt using www.PiStar.uk/downloads and xlxapi.rlx.lu"
		echo "iv : Initialize gwys.txt using VA3UV.com (includes a large # of repeaters)"
		echo "ir : Initialize gwys.txt using VA3UV.com (but just the reflectors)"
		echo "n  : Edit gwys.txt file with nano"
		echo "v  : Edit gwys.txt file with vi"
		echo
		echo "q  : Quit and return to Main Menu"
		echo
		read -p "Command: " ans
		if   [[ "$ans" == i6* ]]; then
			wget -O XLX_Hosts.txt http://xlxapi.rlx.lu/api.php?do=GetXLXDMRMaster
			wget http://www.pistar.uk/downloads/DExtra_Hosts.txt
			wget http://www.pistar.uk/downloads/DPlus_Hosts.txt
			wget http://www.pistar.uk/downloads/DCS_Hosts.txt
			wget https://hosts.openquad.net/ipv6-hosts.txt
			/bin/rm -f gwys.txt
			echo "# Downloaded from www.pistar.uk and xlxapi.rlx.lu `date`" > gwys.txt
			awk '$1 ~ /^XLX/ { gsub("\r", ""); printf "%s %s 30001\n", $1, $2 }' XLX_Hosts.txt >> gwys.txt
			awk '$1 ~ /^XRF/ { printf "%s %s 30001\n", $1, $2 }' DExtra_Hosts.txt >> gwys.txt
			awk '$1 ~ /^DCS/ { printf "%s %s 30051\n", $1, $2 }' DCS_Hosts.txt >> gwys.txt
			awk '$1 ~ /^REF/ { printf "%s %s 20001\n", $1, $2 }' DPlus_Hosts.txt >> gwys.txt
			cat ipv6-hosts.txt >> gwys.txt
			if [ -e My_Hosts.txt ]; then
				cat My_Hosts.txt >> gwys.txt
			fi
			/bin/rm -f {XLX,DExtra,DPlus,DCS}_Hosts.txt ipv6-hosts.txt
		elif [[ "$ans" == ip* ]]; then
			wget -O XLX_Hosts.txt http://xlxapi.rlx.lu/api.php?do=GetXLXDMRMaster
			wget http://www.pistar.uk/downloads/DExtra_Hosts.txt
			wget http://www.pistar.uk/downloads/DPlus_Hosts.txt
			wget http://www.pistar.uk/downloads/DCS_Hosts.txt
			/bin/rm -f gwys.txt
			echo "# Downloaded from www.pistar.uk and xlxapi.rlx.lu `date`" > gwys.txt
			awk '$1 ~ /^XLX/ { gsub("\r", ""); printf "%s %s 30001\n", $1, $2 }' XLX_Hosts.txt >> gwys.txt
			awk '$1 ~ /^XRF/ { printf "%s %s 30001\n", $1, $2 }' DExtra_Hosts.txt >> gwys.txt
			awk '$1 ~ /^DCS/ { printf "%s %s 30051\n", $1, $2 }' DCS_Hosts.txt >> gwys.txt
			awk '$1 ~ /^REF/ { printf "%s %s 20001\n", $1, $2 }' DPlus_Hosts.txt >> gwys.txt
			if [ -e My_Hosts.txt ]; then
				cat My_Hosts.txt >> gwys.txt
			fi
			/bin/rm -f {XLX,DExtra,DPlus,DCS}_Hosts.txt
		elif [[ "$ans" == iv* ]]; then
			/bin/rm -f gwys.txt
			wget http://www.va3uv.com/gwys.txt
			if [ -e My_Hosts.txt ]; then
				cat My_Hosts.txt >> gwys.txt
			fi
		elif [[ "$ans" == ir* ]]; then
			/bin/rm -f gwys.txt
			wget -nv -O gwys.va3uv.txt http://www.va3uv.com/gwys.txt
			if [ -e gwys.va3uv.txt ]; then
				echo "# Downloaded from www.va3uv.com `date`" > gwys.txt
				awk '$1~/^REF/{print $1, $2, $3}' gwys.va3uv.txt >> gwys.txt
				awk '$1~/^XRF/{print $1, $2, $3}' gwys.va3uv.txt >> gwys.txt
				awk '$1~/^DCS/{print $1, $2, $3}' gwys.va3uv.txt >> gwys.txt
				if [ -e My_Hosts.txt ]; then
					cat My_Hosts.txt >> gwys.txt
				fi
				rm -f gwys.va3uv.txt
			fi
		elif [[ "$ans" == n* ]]; then
			nano gwys.txt
		elif [[ "$ans" == v* ]]; then
			vi gwys.txt
		fi
	done
	ans=''
}

# get defined modules from the config file
if [ -e qn.cfg ]; then
	source <( grep "^module_[abc]=" qn.cfg )
	if [ -z "$module_a" ] && [ -z "$module_b" ] && [ -z "$module_c" ]; then
		echo "No moudules defined in the qn.cfg file!, please re-edit you configuration."
		exit 1
	fi
else
	echo "ERROR: can't find the qn.cfg configuration file!"
	echo "You can use ./config to create your config file."
	exit 1
fi

# get the installation directory from the make file
if [ -e makefile ]; then
	MAKEFILE=makefile
elif [ -e Makefile ]; then
	MAKEFILE=Makefile
else
	echo "ERROR: There is no Makefile or makefile"
	exit 1
fi

source <( grep -e '^BINDIR=' $MAKEFILE )
if [ -z $BINDIR ]; then
	echo "ERROR: The BINDIR definition in $MAKEFILE is empty!"
	exit 1
fi
if [ ! -d "$BINDIR" ]; then
	echo "ERROR: The BINDIR directory $BINDIR is not a directory!"
	exit 1
fi

while [[ "$ans" != q* ]]; do
	clear
	echo
	echo "            IcomGateway Administration Menu  V#20213"
	Header
	BaseStatus
	echo
	if [[ "$GateState" == 'not installed' ]] || [[ "$LinkState" == 'not installed' ]]; then
		if [ -e gwys.txt ]; then
			echo "is : Install configured system"
			echo "gp : Do a 'git pull' to refresh sources"
		else
			echo "     You must set-up your gwys.txt file before installation."
		fi
	else
		echo "us : Uninstall configured System"
	fi
	echo "gw : Gateway File Menu"
	echo
	if [[ "$DTMFState" == 'not installed' ]]; then
		echo "nd : Edit DTMF file with nano"
		echo "vd : Edit DTMF file with vi"
		if [ -e qndtmf ] && [ -n "`diff -q qndtmf qndtmf.sh`" ]; then
			echo "rd : Restore DTMF file to default (this will overwrite existing DTMF file)"
		fi
		echo "id : Install DTMF"
	else
		echo "ud : Uninstall DTMF"
	fi
	echo
	echo "c  : Clean (remove temporary files and locally built executables)"
	echo
	if [[ "$GateState" != 'not installed' ]] && [[ "$LinkState" != 'not installed' ]]; then
		echo "m  : Maintenance Menu"
		echo "l  : Log Menu"
	fi
	echo
	read -p "q    to quit. Command: " ans

	# EXECUTE COMMANDS
	if   [[ "$GateState" == 'not installed' ]] && [[ "$ans" == is* ]]; then
		InstallSystem
		echo 'Wait for a few seconds for everything to start...'
		sleep 5
	elif [[ "$GateState" != 'not installed' ]] && [[ "$ans" == us* ]]; then
		InstallSystem un
	elif [[ "$GateState" == 'not installed' ]] && [[ "$ans" == gp* ]]; then
		git pull
		read -p 'Press <Enter> to continue: ' ans
		ans=''
	elif [[ "$ans" == gw* ]]; then
		GatewayMenu
	elif [[ "$DTMFState" == 'not installed' ]] && [[ "$ans" == nd* ]]; then
		if [ ! -e qndtmf ]; then cp qndtmf.sh qndtmf; fi
		nano qndtmf
	elif [[ "$DTMFState" == 'not installed' ]] && [[ "$ans" == vd* ]]; then
		if [ ! -e qndtmf ]; then cp qndtmf.sh qndtmf; fi
		vi qndtmf
	elif [[ "$DTMFState" == 'not installed' ]] && [ -e qndtmf ] && [ -n "`diff -q qndtmf qndtmf.sh`" ] && [[ "$ans" == rd* ]]; then
		rm -f qndtmf
	elif [[ "$DTMFState" == 'not installed' ]] && [[ "$ans" == id* ]]; then
		if [ ! -e qndtmf ]; then cp qndtmf.sh qndtmf; fi
		sudo make installdtmf
	elif [[ "$DTMFState" != 'not installed' ]] && [[ "$ans" == ud* ]]; then
		sudo make uninstalldtmf
	elif [[ "$ans" == c* ]]; then
		make clean
	elif [[ "$ans" == m* ]]; then
		MaintenanceMenu
	elif [[ "$ans" == l* ]]; then
		LogMenu
	fi
done

exit 0
